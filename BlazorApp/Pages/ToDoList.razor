@page "/Todos"

@using BlazorApp.Models.TodoItem


@inject ITodoItemRepository TodoItemRepository

<h3>Todo List</h3>

@if (TodoItems == null)
{
    <p><em>Loading...</em></p>
}
else if (TodoItems.Count == 0)
{
    <p><em>No items found.</em></p>
}
else
{
    <table class="table mt-5">
        <thead>
            <tr>
                <th>To Do</th>
                <th>Done</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in TodoItems)
            {
                <tr>
                    <td>@item.Title</td>
                    <td><input type="checkbox" @bind="item.IsDone" /></td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="(() => EditTodoItem(item.Id))">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="(() => DeleteTodoItemAsync(item.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    

}

@*@if (ShowEditForm)
{
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <label for="editTodoItemTitle">Title:</label>
                <input class="form-control" id="editTodoItemTitle" @bind-value="editTodoItem.Title" />
            </div>
            <div class="form-group">
                <label for="editTodoItemIsDone">Is Done:</label>
                <input type="checkbox" class="form-control" id="editTodoItemIsDone" @bind-value="editTodoItem.IsDone" />
            </div>
            <button class="btn btn-success" @onclick="SaveTodoItemAsync">Save</button>
            <button class="btn btn-danger" @onclick="CancelEdit">Cancel</button>
        </div>
    </div>
}*@
@if (ShowEditForm)
{
<div class="modal fade show" tabindex="-1" style="display:block;" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Todo</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CancelEdit" />
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="exampleInputEmail1">Todo</label>
                            <input type="text" class="form-control" @bind-value="editTodoItem.Title">
                        </div>
                        
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="SaveTodoItemAsync">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CancelEdit">Close</button>
                    
                </div>
            </div>
        </div>
    </div>
}
<div class="row">
    <div class="col-md-4 ">
        <div class="form-group">
            <label for="newTodoItemTitle">Things to do:</label>
            <input class="form-control" id="newTodoItemTitle" @bind-value="newTodoItemTitle" />
        </div>
        @*<div class="form-group">
            <label for="newTodoItemIsDone">Is Done:</label>
            <input type="checkbox" class="form-control" id="newTodoItemIsDone" @bind-value="newTodoItemIsDone" />
        </div>*@
        <button class="btn btn-primary mt-3" @onclick="AddTodoItemAsync">Add Todo Item</button>
    </div>
</div>

@code {
    List<TodoItem> TodoItems;
    TodoItem editTodoItem = null;
    bool ShowEditForm = false;
    string newTodoItemTitle;
    bool newTodoItemIsDone=false;

    protected override async Task OnInitializedAsync()
    {
        TodoItems = await TodoItemRepository.GetAll();
    }

    private async Task AddTodoItemAsync()
    {
        var item = new TodoItem { Title = newTodoItemTitle, IsDone = newTodoItemIsDone };
        await TodoItemRepository.Create(item);
        TodoItems.Add(item);
        newTodoItemTitle = string.Empty;
        newTodoItemIsDone = false;
    }

    private async Task DeleteTodoItemAsync(int id)
    {
        await TodoItemRepository.Delete(id);
        TodoItems.RemoveAll(x => x.Id == id);
    }

    private void EditTodoItem(int id)
    {
        editTodoItem = TodoItems.Find(item => item.Id == id);
        ShowEditForm = true;
    }

    private async Task SaveTodoItemAsync()
    {
        await TodoItemRepository.Update(editTodoItem);
        editTodoItem = null;
        ShowEditForm = false;
    }

    private void CancelEdit()
    {
        editTodoItem = null;
        ShowEditForm = false;
    }
}

